import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { Socket } from 'ngx-socket-io';
import { v4 as uuidv4 } from 'uuid';
@Injectable({
  providedIn: 'root',
})
export class SocketConnectionServiceService {
  roomID: string = '';
  peerConnection: RTCPeerConnection = new RTCPeerConnection({
    iceServers: [{ urls: 'stun:stun.l.google.com:19302' }],
  });

  constructor(
    private _socket: Socket,
    private router: Router,
  ) {
    this.peerConnection = new RTCPeerConnection({
      iceServers: [
        {
          urls: [
            'stun:stun.l.google.com:19302',
            'stun:stun.l.google.com:19302',
          ],
        },
      ],
    });
  }
  ngOnInit() {
    this.peerConnection = new RTCPeerConnection({
      iceServers: [{ urls: 'stun:stun.l.google.com:19302' }],
    });
  }
  createRoomID(): string {
    this.roomID = uuidv4();
    console.log('created Room ID:', this.roomID);
    return this.roomID;
  }
  initiateRoomConnection(
    roomID: string,
    displayName: string,
    picture: string,
    email: string,
  ) {
    this._socket.emit('user:room-join', {
      roomID,
      displayName,
      picture,
      email,
    });
    this.router.navigate([`/call/${roomID}`]);
  }
  joinRoom(
    roomID: string,
    displayName: string,
    picture: string,
    email: string,
  ) {
    this._socket.emit('user:room-join', {
      roomID,
      displayName,
      picture,
      email,
    });
    this.router.navigate([`/call/${roomID}`]);
  }
  getOffer(roomID: string) {
    if (this.peerConnection) {
      console.log(this.peerConnection);
      this.peerConnection.createOffer().then((res) => {
        this.peerConnection.setLocalDescription(res);
      });
    }
  }

  async createAnswer(offer: any) {
    this.peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
    const answer = await this.peerConnection.createAnswer();
    await this.peerConnection.setLocalDescription(answer);
    return answer;
  }
  handleUserJoined(data: any) {
    const { roomID } = data;
    console.log('handleUserJoin()', roomID);
    const offer = this.getOffer(roomID);
    console.log(offer);
    this._socket.emit('peer:init-call', { to: roomID, offer });
  }
  async handleIncommingCall(data: any) {
    const { from, user, offer } = data;
    const answer = await this.createAnswer(offer);
    console.log('incomming call');
    this._socket.emit('peer:call-accepted', { to: user.roomID, offer: answer });
  }
}
